{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/juhol/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/juhol/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/juhol/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import YouTube from'react-youtube';import axios from'./axios';import\"./Row.css\";//import movieTrailer from \"movie-trailer\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];// A snippet of code which runs based on a specific condition\nuseEffect(function(){// if [], run once when the row loads, and dont run again\nfunction fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(movie){var _trailerurl$data$resu,trailerurl;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!trailerUrl){_context2.next=4;break;}setTrailerUrl('');_context2.next=8;break;case 4:_context2.next=6;return axios.get(\"/movie/\".concat(movie.id,\"/videos?api_key=41eaf5849eede09a346831f5e0aafbba\"));case 6:trailerurl=_context2.sent;setTrailerUrl((_trailerurl$data$resu=trailerurl.data.results[0])===null||_trailerurl$data$resu===void 0?void 0:_trailerurl$data$resu.key);//   movieTrailer(movie?.name || \"\")\n//   .then(url => {\n//     const urlParams = new URLSearchParams(new URL(url).search);\n//     setTrailerUrl(urlParams.get('v'));\n//   })\n//   .catch((error) => console.log(error));\ncase 8:case\"end\":return _context2.stop();}}},_callee2);}));return function handleClick(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["C:/Users/juhol/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","YouTube","axios","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","id","trailerurl","key","map","poster_path","backdrop_path","name"],"mappings":"sbAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA;wFAEA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA6C,IAA9BC,CAAAA,KAA8B,MAA9BA,KAA8B,CAAvBC,QAAuB,MAAvBA,QAAuB,CAAbC,UAAa,MAAbA,UAAa,eACbR,QAAQ,CAAC,EAAD,CADK,wCAClCS,MADkC,eAC1BC,SAD0B,8BAELV,QAAQ,CAAC,EAAD,CAFH,yCAElCW,UAFkC,eAEtBC,aAFsB,eAIzC;AACAX,SAAS,CAAC,UAAM,CACZ;AADY,QAEGY,CAAAA,SAFH,qIAEZ,qKAC0BV,CAAAA,KAAK,CAACW,GAAN,CAAUP,QAAV,CAD1B,QACUQ,OADV,eAEIL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFJ,gCAGWF,OAHX,wDAFY,4CAOZF,SAAS,GACZ,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CAUA,GAAMW,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAE,KADC,CAETC,KAAK,CAAE,MAFE,CAGTC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHH,CAAb,CAQE,GAAMC,CAAAA,WAAW,2FAAG,kBAAOC,KAAP,+JACZb,UADY,0BAEZC,aAAa,CAAC,EAAD,CAAb,CAFY,qDAIST,CAAAA,KAAK,CAACW,GAAN,kBACTU,KAAK,CAACC,EADG,qDAJT,QAIVC,UAJU,gBAOZd,aAAa,wBAACc,UAAU,CAACV,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,gDAAC,sBAA4BU,GAA7B,CAAb,CACF;AACA;AACA;AACA;AACA;AACA;AAbc,wDAAH,kBAAXJ,CAAAA,WAAW,6CAAjB,CAiBF,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAKjB,KAAL,EADJ,cAGK,YAAK,SAAS,CAAC,cAAf,UAECG,MAAM,CAACmB,GAAP,CAAW,SAAAJ,KAAK,qBACd,YAEA,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFT,CAGA,SAAS,uBAAiBhB,UAAU,EAAI,kBAA/B,CAHT,CAIA,GAAG,WAAKJ,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACK,WAAT,CAAuBL,KAAK,CAACM,aAAvD,CAJH,CAKA,GAAG,CAAEN,KAAK,CAACO,IALX,EACKP,KAAK,CAACC,EADX,CADc,EAAhB,CAFD,EAHL,CAeCd,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAff,GADJ,CAmBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\n//import movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    // A snippet of code which runs based on a specific condition\r\n    useEffect(() => {\r\n        // if [], run once when the row loads, and dont run again\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n          autoplay: 1,\r\n        },\r\n      };\r\n\r\n      const handleClick = async (movie) => {\r\n          if (trailerUrl) {\r\n              setTrailerUrl('');\r\n          } else {\r\n            let trailerurl = await axios.get(\r\n                `/movie/${movie.id}/videos?api_key=41eaf5849eede09a346831f5e0aafbba`\r\n              );\r\n              setTrailerUrl(trailerurl.data.results[0]?.key);\r\n            //   movieTrailer(movie?.name || \"\")\r\n            //   .then(url => {\r\n            //     const urlParams = new URLSearchParams(new URL(url).search);\r\n            //     setTrailerUrl(urlParams.get('v'));\r\n            //   })\r\n            //   .catch((error) => console.log(error));\r\n          }\r\n      }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n             <div className=\"row__posters\">\r\n\r\n             {movies.map(movie =>(\r\n                <img\r\n                key={movie.id}\r\n                onClick={() => handleClick(movie)}\r\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                alt={movie.name}\r\n                />\r\n             ))}\r\n        </div>\r\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}