{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","handleClick","movie","id","trailerurl","key","className","map","onClick","src","poster_path","backdrop_path","alt","name","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backdropPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcaa1c2e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\n//import movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    // A snippet of code which runs based on a specific condition\r\n    useEffect(() => {\r\n        // if [], run once when the row loads, and dont run again\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n          autoplay: 1,\r\n        },\r\n      };\r\n\r\n      const handleClick = async (movie) => {\r\n          if (trailerUrl) {\r\n              setTrailerUrl('');\r\n          } else {\r\n            let trailerurl = await axios.get(\r\n                `/movie/${movie.id}/videos?api_key=41eaf5849eede09a346831f5e0aafbba`\r\n              );\r\n              setTrailerUrl(trailerurl.data.results[0]?.key);\r\n            //   movieTrailer(movie?.name || \"\")\r\n            //   .then(url => {\r\n            //     const urlParams = new URLSearchParams(new URL(url).search);\r\n            //     setTrailerUrl(urlParams.get('v'));\r\n            //   })\r\n            //   .catch((error) => console.log(error));\r\n          }\r\n      }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n             <div className=\"row__posters\">\r\n\r\n             {movies.map(movie =>(\r\n                <img\r\n                key={movie.id}\r\n                onClick={() => handleClick(movie)}\r\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                alt={movie.name}\r\n                />\r\n             ))}\r\n        </div>\r\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"41eaf5849eede09a346831f5e0aafbba\"; \r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n  };\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n    const[movie, setMovie] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length -1)\r\n                ]\r\n        );\r\n        return request;\r\n    }\r\n    fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header\r\n        className = \"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n            backdropPosition: \"center center\",\r\n        }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n            <h1 className=\"banner__title\">\r\n            {movie?.title || movie?.name || movie?.original_name}</h1>\r\n\r\n            <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\">Play</button>\r\n                <button className=\"banner__button\">My List</button>\r\n            </div>\r\n    \r\n            <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const[show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n\r\n            if (window.scrollY > 100) {\r\n            handleShow(true);\r\n        } else handleShow(false);\r\n        });\r\n        return() => {\r\n            window.removeEventListener(\"scroll\");\r\n        } ;\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\" }`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n\r\n<img\r\n        className=\"nav__avatar\"\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"Avatar\"\r\n      />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav/>\n      <Banner />\n      <Row\n      title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}